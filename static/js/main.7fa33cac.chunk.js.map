{"version":3,"sources":["util/rng.ts","util/hash.ts","App.tsx","serviceWorker.js","index.js"],"names":["RNG","max","arguments","length","undefined","Math","floor","random","genHash","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","text","encoded","hashed","byte","hex","wrap","_context","prev","next","TextEncoder","encode","window","crypto","subtle","digest","sent","Uint8Array","Array","from","map","val","toString","padStart","abrupt","join","stop","_x","apply","this","centerAlign","css","_templateObject","initialRound","serverSeed","salt","hash","btoa","concat","Rounds","_useState","useState","_useState2","slicedToArray","rounds","setRounds","_useState3","_useState4","current","setCurrent","_useState5","_useState6","input","setInput","useEffect","then","r","core_browser_esm","onChange","e","v","parseInt","target","value","handleInput","type","onClick","result","history","objectSpread","clientSeed","toConsumableArray","play","App_RoundHistory","RoundHistory","prop","key","App","className","App_Rounds","Component","Boolean","location","hostname","match","ReactDOM","render","react_default","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fa33cac.chunk.js","sourcesContent":["// biased unsecure RNG\nexport const RNG = (max = 100): number => {\n    return Math.floor(Math.random() * 10000 % max);\n}\n\nexport const randomString = (): string => {\n    return btoa(Math.random().toString());\n}\n\n","export const genHash = async (text: string): Promise<string> => {\n    const encoded = new TextEncoder().encode(text);\n    const hashed = await window.crypto.subtle.digest('SHA-256', encoded);\n    const byte = new Uint8Array(hashed);\n    const hex = Array.from(byte).map(val => {\n        return val.toString(16).padStart(2, '0');\n    });\n    return hex.join('');\n}\n\n","// SINGLE FILE\nimport React, { Component, useState, useEffect } from 'react';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport {RNG, randomString} from './util/rng';\nimport { genHash } from './util/hash';\n\nconst centerAlign = css`\n  text-align: center;\n`;\n\ninterface Round {\n  hash: string;\n  clientSeed?: number;\n  serverSeed: number;\n  salt: string;\n  result?: number;\n}\n\n/**\n * hash formula\n * hash = serverSeed + '_' + salt\n */\nconst initialRound = async (): Promise<Round> => {\n  const serverSeed = RNG();\n  const salt = randomString();\n  const hash = await genHash(`${serverSeed}_${salt}`);\n  return {serverSeed, salt, hash};\n}\n\n// game view\nconst Rounds: React.FC<{}> = () => {\n  const [rounds, setRounds] = useState([] as Array<Round>);\n  const [current, setCurrent] = useState({} as Round);\n  const [input, setInput] = useState(0);\n\n  useEffect(() => {\n    initialRound().then(r=> {\n        setCurrent(r);\n    });\n  }, []);\n\n  const play = (): any => {\n    const result = (input + current.serverSeed) % 100;\n    const backround = {...current, result, clientSeed: input};\n    const history = [backround, ...rounds];\n    setRounds(history);\n    setInput(0);\n    initialRound().then(r=> {\n      setCurrent(r);\n    });\n  }\n\n  const handleInput = (e: {target: HTMLInputElement}) => {\n    const v = parseInt(e.target.value);\n    setInput(v);\n  }\n\n  return (\n    <div>\n      <p>Round Hash: {current.hash}</p>\n      <p>\n        Client Seed\n        <input onChange={(e) => handleInput(e)} type='number' value={input} />\n        <button onClick={() => play()} type='submit'>Play</button>\n      </p>\n      <h2 css={centerAlign}>history</h2>\n      <RoundHistory history={rounds} />\n    </div>\n  )\n}\n\ninterface RDProp {\n  history: Round[];\n}\n\n// typical table\nconst RoundHistory: React.FC<RDProp> = (prop) => {\n  return (\n    <table css={centerAlign}>\n      <tr>\n        <th>Round Hash</th>\n        <th>Client Random (Seed)</th>\n        <th>Server Random (Seed)</th>\n        <th>Salt</th>\n        <th>Result</th>\n      </tr>\n      {prop.history.map(r => {\n        return (\n          <tr key={r.hash}>\n            <td>{r.hash}</td>\n            <td>{r.clientSeed}</td>\n            <td>{r.serverSeed}</td>\n            <td>{r.salt}</td>\n            <td>{r.result} of 0-99</td>\n          </tr>\n        )\n      })}\n    </table>\n  )\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 css={centerAlign}>Provably Fair demo</h1>\n        <Rounds/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}